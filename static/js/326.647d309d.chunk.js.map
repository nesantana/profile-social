{"version":3,"file":"static/js/326.647d309d.chunk.js","mappings":"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","sources":["Components/FormProfile/index.tsx","Components/User/index.tsx","Constants/index.tsx","Pages/Users/index.tsx","../node_modules/@chakra-ui/layout/src/heading.tsx"],"sourcesContent":["import { Box, Card, Input, Text } from \"@chakra-ui/react\";\r\nimport { iUser } from \"../../Interfaces\";\r\n\r\nconst inputsBasic = [\r\n  {\r\n    name: \"name\",\r\n    text: \"Nome\",\r\n    disabled: false,\r\n  },\r\n  {\r\n    name: \"username\",\r\n    text: \"Nome de usuário\",\r\n    disabled: false,\r\n  },\r\n  {\r\n    name: \"email\",\r\n    text: \"E-mail\",\r\n    disabled: true,\r\n  },\r\n  {\r\n    name: \"phone\",\r\n    text: \"Telefone\",\r\n    disabled: false,\r\n  },\r\n  {\r\n    name: \"website\",\r\n    text: \"Website\",\r\n    disabled: false,\r\n  },\r\n];\r\n\r\nconst inputsAddress = [\r\n  {\r\n    name: \"street\",\r\n    text: \"Rua\",\r\n  },\r\n  {\r\n    name: \"suite\",\r\n    text: \"Nº\",\r\n  },\r\n  {\r\n    name: \"city\",\r\n    text: \"Cidade\",\r\n  },\r\n  {\r\n    name: \"zipcode\",\r\n    text: \"CEP\",\r\n  },\r\n];\r\n\r\nconst inputsCompany = [\r\n  {\r\n    name: \"name\",\r\n    text: \"Nome da empresa\",\r\n  },\r\n  {\r\n    name: \"catchPhrase\",\r\n    text: \"Tagline da empresa\",\r\n  },\r\n  {\r\n    name: \"bs\",\r\n    text: \"B.S. da empresa\",\r\n  },\r\n];\r\n\r\nconst FormProfile = ({\r\n  user,\r\n  setUser,\r\n  isNewUser = false,\r\n}: {\r\n  user: iUser;\r\n  setUser(user: iUser): void;\r\n  isNewUser?: boolean;\r\n}) => {\r\n  const handleUserChange = ({\r\n    value,\r\n    key,\r\n    type,\r\n  }: {\r\n    value: string;\r\n    key: string;\r\n    type?: \"address\" | \"company\";\r\n  }) => {\r\n    if (type === \"address\") {\r\n      setUser({\r\n        ...user,\r\n        address: {\r\n          ...user.address,\r\n          [key]: value,\r\n        },\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    if (type === \"company\") {\r\n      setUser({\r\n        ...user,\r\n        company: {\r\n          ...user.company,\r\n          [key]: value,\r\n        },\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    setUser({ ...user, [key]: value });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card p={5} borderRadius={10} gap={2}>\r\n        <Text mb={2} fontWeight={\"bold\"}>\r\n          Informações básicas\r\n        </Text>\r\n        {inputsBasic.map((input) => (\r\n          <Box key={input.name}>\r\n            <Text fontSize={\"small\"} mb={2} color=\"gray.500\">\r\n              {input.text === \"E-mail\" && !isNewUser\r\n                ? \"E-mail (Informação não editadável)\"\r\n                : input.text}\r\n            </Text>\r\n            <Input\r\n              placeholder={input.text}\r\n              borderColor=\"gray.200\"\r\n              disabled={input.disabled && !isNewUser}\r\n              value={user[input.name as keyof iUser] as string}\r\n              onChange={({ target }) =>\r\n                handleUserChange({ value: target.value, key: input.name })\r\n              }\r\n            />\r\n          </Box>\r\n        ))}\r\n      </Card>\r\n      <Card p={5} borderRadius={10} gap={2}>\r\n        <Text mb={2} fontWeight={\"bold\"}>\r\n          Endereço\r\n        </Text>\r\n        {inputsAddress.map((input) => (\r\n          <Box key={input.name}>\r\n            <Text fontSize={\"small\"} mb={2} color=\"gray.500\">\r\n              {input.text}\r\n            </Text>\r\n            <Input\r\n              placeholder={input.text}\r\n              borderColor=\"gray.200\"\r\n              value={\r\n                user[\"address\"][input.name as keyof iUser[\"address\"]] as string\r\n              }\r\n              onChange={({ target }) =>\r\n                handleUserChange({\r\n                  value: target.value,\r\n                  key: input.name,\r\n                  type: \"address\",\r\n                })\r\n              }\r\n            />\r\n          </Box>\r\n        ))}\r\n      </Card>\r\n      <Card p={5} borderRadius={10} gap={2}>\r\n        <Text mb={2} fontWeight={\"bold\"}>\r\n          Empresa\r\n        </Text>\r\n        {inputsCompany.map((input) => (\r\n          <Box key={input.name}>\r\n            <Text fontSize={\"small\"} mb={2} color=\"gray.500\">\r\n              {input.text}\r\n            </Text>\r\n            <Input\r\n              placeholder={input.text}\r\n              borderColor=\"gray.200\"\r\n              value={\r\n                user[\"company\"][input.name as keyof iUser[\"company\"]] as string\r\n              }\r\n              onChange={({ target }) =>\r\n                handleUserChange({\r\n                  value: target.value,\r\n                  key: input.name,\r\n                  type: \"company\",\r\n                })\r\n              }\r\n            />\r\n          </Box>\r\n        ))}\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormProfile;\r\n","import { Box, Button, Flex, Heading, Text, Tooltip } from \"@chakra-ui/react\";\r\nimport { iUser } from \"../../Interfaces\";\r\nimport { BiLogInCircle, BiUser } from \"react-icons/bi\";\r\nimport { useUsersContext } from \"../../Context/Users.context\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst User = ({\r\n  user,\r\n  hasAction = false,\r\n  hasRoute = false,\r\n}: {\r\n  user: iUser;\r\n  hasAction?: boolean;\r\n  hasRoute?: boolean;\r\n}) => {\r\n  const { loginUser } = useUsersContext();\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <Flex flex=\"1\" gap=\"2\" alignItems=\"center\" justifyContent={\"space-between\"}>\r\n      <Flex\r\n        gap=\"2\"\r\n        cursor={hasRoute ? \"pointer\" : \"\"}\r\n        onClick={(e) => {\r\n          if (!hasRoute) return;\r\n          e.preventDefault();\r\n          navigate(`/posts/${user?.id}`);\r\n        }}\r\n      >\r\n        <Flex\r\n          width=\"50px\"\r\n          height=\"50px\"\r\n          bg=\"gray.100\"\r\n          borderRadius=\"50%\"\r\n          justifyContent={\"center\"}\r\n          alignItems={\"center\"}\r\n        >\r\n          <BiUser size={25} />\r\n        </Flex>\r\n        <Box>\r\n          <Heading size=\"sm\">{user?.name || \"\"}</Heading>\r\n          <Text>{user.email || \"\"}</Text>\r\n        </Box>\r\n      </Flex>\r\n      {hasAction && (\r\n        <Flex gap={2}>\r\n          <Tooltip label=\"Fazer login como este usuário\" placement=\"left\">\r\n            <Button\r\n              size={\"sm\"}\r\n              p={1}\r\n              rounded={\"full\"}\r\n              onClick={() => loginUser(user)}\r\n            >\r\n              <BiLogInCircle size={20} />\r\n            </Button>\r\n          </Tooltip>\r\n        </Flex>\r\n      )}\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","import { iUser } from \"../Interfaces\";\r\n\r\nexport const DEFAULT_USER: iUser = {\r\n  id: 0,\r\n  name: \"\",\r\n  username: \"\",\r\n  email: \"\",\r\n  address: {\r\n    street: \"\",\r\n    suite: \"\",\r\n    city: \"\",\r\n    zipcode: \"\",\r\n    geo: {\r\n      lat: \"\",\r\n      lng: \"\",\r\n    },\r\n  },\r\n  phone: \"\",\r\n  website: \"\",\r\n  company: {\r\n    name: \"\",\r\n    catchPhrase: \"\",\r\n    bs: \"\",\r\n  },\r\n};\r\n","import {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  Flex,\r\n  Input,\r\n  Text,\r\n  Tooltip,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect, useMemo, useState } from \"react\";\r\n\r\nimport { iUser } from \"../../Interfaces\";\r\nimport { useUsersContext } from \"../../Context/Users.context\";\r\nimport User from \"../../Components/User\";\r\nimport { DEFAULT_USER } from \"../../Constants\";\r\nimport FormProfile from \"../../Components/FormProfile\";\r\nimport { BiMinus, BiPlus } from \"react-icons/bi\";\r\n\r\nconst Users = () => {\r\n  const { users, getAllUsers, createUser } = useUsersContext();\r\n  const [search, setSearch] = useState<string>(\"\");\r\n\r\n  // New user\r\n  const [newUser, setNewUser] = useState<iUser>({\r\n    ...DEFAULT_USER,\r\n    id: Math.random(),\r\n  });\r\n  const [openNewUser, setOpenNewUser] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!users.length) {\r\n      getAllUsers();\r\n    }\r\n  }, [getAllUsers, users]);\r\n\r\n  const usersFiltered = useMemo(() => {\r\n    if (!search.length) return users;\r\n\r\n    return users.filter((user: iUser) =>\r\n      user?.name?.toLowerCase().includes(search.toLowerCase())\r\n    );\r\n  }, [search, users]);\r\n\r\n  return (\r\n    <Box>\r\n      <Box mb={5}>\r\n        <Flex justifyContent={\"space-between\"} alignItems={\"center\"}>\r\n          <Box>\r\n            <Text as=\"h1\" fontSize={\"2xl\"} fontWeight={\"bold\"}>\r\n              Usuários\r\n            </Text>\r\n            <Text as=\"p\" color={\"gray.500\"}>\r\n              Selecione o usuário que deseja usar!\r\n            </Text>\r\n          </Box>\r\n\r\n          <Tooltip\r\n            label={openNewUser ? \"Fechar\" : \"Criar um novo usuário\"}\r\n            placement=\"left\"\r\n          >\r\n            <Button\r\n              size={\"sm\"}\r\n              height={\"40px\"}\r\n              width={\"40px\"}\r\n              p={0}\r\n              rounded={\"full\"}\r\n              onClick={() => setOpenNewUser(!openNewUser)}\r\n            >\r\n              {openNewUser ? <BiMinus size={20} /> : <BiPlus size={20} />}\r\n            </Button>\r\n          </Tooltip>\r\n        </Flex>\r\n        {openNewUser && (\r\n          <Box textAlign={\"left\"} mt={5}>\r\n            <FormProfile user={newUser} setUser={setNewUser} isNewUser />\r\n\r\n            <Flex gap={2} justifyContent={\"space-between\"} mt={5}>\r\n              <Button\r\n                colorScheme=\"red\"\r\n                onClick={() => {\r\n                  setOpenNewUser(false);\r\n                  setNewUser(DEFAULT_USER);\r\n                }}\r\n              >\r\n                Cancelar\r\n              </Button>\r\n              <Button\r\n                colorScheme=\"green\"\r\n                onClick={() => {\r\n                  createUser(newUser);\r\n                  setOpenNewUser(false);\r\n                  setNewUser(DEFAULT_USER);\r\n                }}\r\n              >\r\n                Criar Usuário\r\n              </Button>\r\n            </Flex>\r\n          </Box>\r\n        )}\r\n\r\n        <Input\r\n          placeholder=\"Buscar por nome...\"\r\n          mt={5}\r\n          value={search}\r\n          onChange={({ target }) => setSearch(target.value)}\r\n        />\r\n      </Box>\r\n      <Flex direction={\"column\"} gap={5}>\r\n        {!!usersFiltered.length &&\r\n          usersFiltered?.map((user: iUser) => (\r\n            <Card key={user?.id} p={5} borderRadius={10}>\r\n              <User user={user} hasAction />\r\n            </Card>\r\n          ))}\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n"],"names":["inputsBasic","name","text","disabled","inputsAddress","inputsCompany","_ref","user","setUser","isNewUser","handleUserChange","_ref2","value","key","type","company","address","_jsxs","_Fragment","children","Card","p","borderRadius","gap","_jsx","Text","mb","fontWeight","map","input","Box","fontSize","color","Input","placeholder","borderColor","onChange","_ref3","target","_ref4","_ref5","hasAction","hasRoute","loginUser","useUsersContext","navigate","useNavigate","Flex","flex","alignItems","justifyContent","cursor","onClick","e","preventDefault","concat","id","width","height","bg","BiUser","size","Heading","email","Tooltip","label","placement","Button","rounded","BiLogInCircle","DEFAULT_USER","username","street","suite","city","zipcode","geo","lat","lng","phone","website","catchPhrase","bs","Users","users","getAllUsers","createUser","search","setSearch","useState","newUser","setNewUser","Math","random","openNewUser","setOpenNewUser","useEffect","length","usersFiltered","useMemo","filter","_user$name","toLowerCase","includes","as","BiMinus","BiPlus","textAlign","mt","FormProfile","colorScheme","direction","User","forwardRef","props","ref","styles","useStyleConfig","className","rest","omitThemingProps","jsx","chakra","h2","cx","__css","displayName"],"sourceRoot":""}